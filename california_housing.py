# -*- coding: utf-8 -*-
"""Project_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V0hggb35ImHxMj0U4gTSqR0zW7S2UseC
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.preprocessing import PolynomialFeatures
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor

# Load dataset
df = fetch_california_housing(as_frame=True)
data = df.frame

data.isnull().sum()

#Descriptive statistics of dataset
data.describe()

sns.displot(data['MedHouseVal'],kde = False )
plt.title('MedHouseVal Distribution')
plt.xlabel('Median house value in ($100,000)')
plt.legend(['MedHouseVal Distribution'], loc = 'best')
plt.show()

data.keys()

parameters_effects_target = data[['MedInc', 'HouseAge', 'AveRooms', 'AveBedrms', 'Population', 'AveOccup']]

sns.heatmap(parameters_effects_target.corr(), annot=True)
plt.show()

from sklearn.model_selection import train_test_split

testsize = 0.8

x_train, x_test, y_train, y_test = train_test_split(parameters_effects_target, data['MedHouseVal'], test_size = testsize, random_state=200)

from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error

print("Median House Value Predictions Evaluated by Various Methods blow Using the Test Data with {}% test size\n".format(testsize))

# Ridge Regression Model
ridge_regression_model = Ridge(alpha=1.0)
ridge_regression_model.fit(x_train, y_train)
ridge_predictions = ridge_regression_model.predict(x_test)
ridge_score = r2_score(y_test, ridge_predictions)

print("Ridge Regression Model R^2 Score:", ridge_score)

# Decision Tree Regression Model
decision_tree_model = DecisionTreeRegressor()
decision_tree_model.fit(x_train, y_train)
decision_tree_predictions = decision_tree_model.predict(x_test)
decision_tree_score = r2_score(y_test, decision_tree_predictions)
print("Decision Tree Regression Model R^2 Score:", decision_tree_score)

# Random Forest Regression Model
random_forest_model = RandomForestRegressor()
random_forest_model.fit(x_train, y_train)
random_forest_predictions = random_forest_model.predict(x_test)
random_forest_score = r2_score(y_test, random_forest_predictions)
print("Random Forest Regression Model R^2 Score:", random_forest_score)

# Gradient Boosting Regression Model
gradient_boosting_model = GradientBoostingRegressor()
gradient_boosting_model.fit(x_train, y_train)
gradient_boosting_predictions = gradient_boosting_model.predict(x_test)
gradient_boosting_score = r2_score(y_test, gradient_boosting_predictions)
print("Gradient Boosting Regression Model R^2 Score:", gradient_boosting_score)

# Ridge Regression Model
ridge_mae = mean_absolute_error(y_test, ridge_predictions)

# Decision Tree Regression Model
decision_tree_mae = mean_absolute_error(y_test, decision_tree_predictions)

# Random Forest Regression Model
random_forest_mae = mean_absolute_error(y_test, random_forest_predictions)

# Gradient Boosting Regression Model
gradient_boosting_mae = mean_absolute_error(y_test, gradient_boosting_predictions)


print("Ridge Regression Model MAE:", ridge_mae)
print("Decision Tree Regression Model MAE:", decision_tree_mae)
print("Random Forest Regression Model MAE:", random_forest_mae)
print("Gradient Boosting Regression Model MAE:", gradient_boosting_mae)

